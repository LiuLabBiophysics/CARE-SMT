from cellquantifier.segm import *
from glob import glob
from skimage.util import img_as_ubyte
from skimage.io import imread, imsave

"""

U-Net

This application builds the u-net architecture to perform automated segmentation
of raw image data. Modify default paths and comment out lines for your purposes.

Notes
----------

1. Every image to used for training should be accompanied by a mask with an
   identical file name and '.png' type

2. To perform segmentation w/o training a new model, use the u-net wrapper
   function cellquantifier.segm.segm_unet() and pass a custom model or use
   one of the default cellquantifier models

3. If training and using a new custom model, the suggested directory structure is

    /unet
        /train_input - contains raw image + masks for training
            /raw - raw image data
            /target - ground truth masks
        /test_input - contains raw image data to be segmented
        /test_output - contains masks predicted by the model
        (model.h5) - generated by cellquantifier
        (train_stats.csv) - generated by cellquantifier

"""

# """
# ~~~~~~~~~~Params~~~~~~~~~~~~~~
# """

crop_size = (256, 256)
batch_size = 10
epochs = 15
steps_per_epoch = 500
fraction_validation = 0.25

root_dir = '/home/cwseitz/Desktop/data-analysis/unet/'
train_dir  = root_dir + 'train_input/'
test_dir = root_dir + 'test_input/'

# # """
# # ~~~~~~~~~~~Prep Training/Validation Data~~~~~~~~~~~~~~
# # """

input_dir = root_dir + 'train_input/raw/'
target_dir = root_dir + 'train_input/target/'
train, valid = partition_files(input_dir, target_dir, fraction_validation)

train_gen = train_stack_gen(train, crop_size=crop_size, batch_size=batch_size)
valid_gen = valid_stack_gen(valid, crop_size=crop_size)

# # """
# # ~~~~~~~~~~~Train~~~~~~~~~~~~~~
# # """

train_model(train_gen,
            valid_gen,
            crop_size,
            save_dir=root_dir,
            epochs=epochs,
            steps_per_epoch=steps_per_epoch)

show_train_stats(root_dir + 'train_stats.csv')

# """
# ~~~~~~~~~~~Test~~~~~~~~~~~~~~
# """

files = glob(test_dir + '/*.tif')
stack = imread(files[0]); stack = stack[:10]
stack = stack/stack.max()

dim1, dim2 = stack.shape[1], stack.shape[2]
model = unet_model(input_size=(dim1, dim2))
model = model.load_weights(root_dir + 'model.h5')
make_prediction(stack, weights, output_path=root_dir + 'test_output/')
